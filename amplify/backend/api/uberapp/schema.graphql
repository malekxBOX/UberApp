type User @model 
@auth(rules: [
    { allow: groups, groups: ["Admin"] },
    { allow: owner, ownerField: "username", operations: [create, read] }
  ]) 
  {
  id: ID!
  username: String!
  email: String!

  # orders: [Order] @connection(keyName: "byUser", fields: ["id"])
  orders: [Order] @hasMany(indexName: "byUser", fields: ["id"])

  # car: Car @connection(fields: ["id"]) 
  car: Car @hasOne(fields:["id"])
}

type Car @model 
@auth(rules: [
    { allow: groups, groups: ["Admin"] },
    { allow: owner, ownerField: "username", operations: [create, read, update] }
  ]) 
   {
  id: ID!
  type: String!
  latitude: Float,
  longitude: Float,
  heading: Float,
  isActive: Boolean

  # orders: [Order] @connection(keyName: "byCar", fields: ["id"]) 
  orders: [Order] @hasMany(indexName: "byCar", fields: ["id"])

  userId: ID!

  # user: User @connection(fields: ["userId"]) 
    user: User @hasOne(fields:["userId"])
}

type Order @model 
@auth(rules: [
    { allow: groups, groups: ["Admin"] },
    { allow: owner, ownerField: "username", operations: [create, read, update] }
  ]) 
  # @key(name: "byCar", fields: ["carId", "createdAt"]) 
  {
  id: ID!
  createdAt: String!

  type: String!
  status: String,

  originLatitude: Float!
  oreiginLongitude: Float!

  destLatitude: Float!
  destLongitude: Float!

  userId: ID! @index(name: "byUser")

  # user: User @connection(fields: ["userId"]) 

  user: User @hasOne(fields:["userId"])

  carId: ID! @index(name: "byCar", sortKeyFields: ["createdAt"])

  # car: Car @connection(fields: ["carId"]) 
    car: Car @hasOne(fields:["carId"])
}

type Subscription {
  onOrderUpdated(id: ID!): Order @aws_subscribe(mutations: ["updateOrder"])
  onCarUpdated(id: ID!): Car @aws_subscribe(mutations: ["updateCar"])
}
